{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.compenent.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAIaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAML,EAAMI,QAAQE,OACpB,4BAAIN,EAAMI,QAAQG,YCHjBC,G,MAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAMA,QAASA,WCPtBO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCuCHG,E,kDAxCb,aAAc,IAAD,8BACX,gBAgBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALJ,E,qDAWb,WAAoB,IAAD,OACjBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAO7C,WACE,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC5CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGpD,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAY,iBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAnCVI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ee7e64ee.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css'\n\nexport const Card = (props) => {\n    return (\n        <div className='card-container'>\n            <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n            <h2>{ props.monster.name }</h2>\n            <p>{props.monster.email}</p>\n        </div>\n    )\n}","import React from 'react';\n\nimport {Card} from '../card/card.component'\n\nimport './card-list.styles.css'\n\nexport const CardList = (props) => {\n    return (\n        <div className=\"card-list\">\n            {\n                props.monsters.map(monster => \n                    <Card monster={monster}/>\n                )\n            }\n        </div>\n    )\n}","import React from 'react';\n\nimport './search-box.styles.css'\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n        className='search'\n        type='search' \n        placeholder={placeholder}\n        onChange={handleChange} \n    />\n);","import React, {Component} from 'react';\nimport './App.css';\n\nimport {CardList} from './components/card-list/card-list.compenent';\nimport {SearchBox} from './components/search-box/search-box.component';\n\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n\n    // this.handleChange = this.handleChange.bind(this); // this allows our function to recognize the this keyword in our new class method\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users}))\n  }\n\n  handleChange = (e) => { //arrow functions automatically bind 'this' to the context where it was given its existence which is the App component\n    this.setState({ searchField: e.target.value });\n  }\n\n  render(){\n    const { monsters, searchField } = this.state; //destructuring ==> const monsters=this.state.monsters\n    const filteredMonsters = monsters.filter(monster => \n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n\n    return(\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder='Search Monster' \n          handleChange={this.handleChange} \n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}